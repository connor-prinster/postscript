%!

% important global
/inch {
	72 mul
} def

%------------------------------------------%
%------------------------------------------%
%            ---- Triforce ----            %
%------------------------------------------%
%------------------------------------------%
/maxDepth 10 def
/origLen 500 def
/origX 60 def
/origY 300 def
 % as height will be the height of an equilateral triangle, it will be
 % the long side of a 30-60-90 triangle, or sqrt3
/sqrt3 1.7320508 def

/tri {
    newpath % start a new path
    x y moveto
    len 0 rlineto % move 'a' to the left by length (base)
    120 rotate % rotate to draw the right side
    len 0 rlineto % draw this side
    240 rotate % rotate so we complete a circle (360 deg)
    closepath % end the path by returning to the beginning
    stroke % draw the path we have set
} def

/recTri {
    % will be sent as x, y, len, depth (but stack is wack)
    /depth exch def 
    /len exch def
    /y exch def
    /x exch def

    tri % draw the triangle with the new values
    depth maxDepth lt { % if we haven't done too much 'recursion'
        /newDepth 1 depth add def % newdepth = depth + 1
        /newLen len 2 div def % we cut the length in half for the new bases of the triforce

        % ---
        % draw three new triangles
        % ---

        % bottom left
        x 
        y
        newLen 
        newDepth 

        % top triangle
        x len 4 div add % x + newLen/4
        y sqrt3 len mul 4 div add % y + newLen * (sqrt3/4) (len instead of newLen for height of original triangle)
        newLen 
        newDepth

        % bottom right
        x newLen add % x + newLen
        y 
        newLen 
        newDepth % bottom right

        % run all three in their own recursion
        recTri recTri recTri
    } if
} def

0 setlinewidth
% (x, y, length, origDepth = 0) to recTri the first time
origX origY origLen 0 recTri

% showpage
grestore

%----------------------------------------------%
%----------------------------------------------%
%            ---- Dragon Curve ----            %
%----------------------------------------------%
%----------------------------------------------%
% variables : X Y
% constants : F + −
% start : FX
% rules : 
%   X = X+YF+
%   Y = −FX−Y
% angle : 90°

/boxSides { % each 'box' will have 3 sides
    3
} def

/boxSize { % max size of the dragon
    10
} def

/boxAng {
    90
} def

/X { % X+YF+
    dup 0 ne { % comparing the size to 0 (as boxSize is on top)
        1 sub % subtract 1 from boxSize
        boxSides {dup} repeat X + Y Fbox +
    } if
    pop 
} def

/Y { % −FX−Y
    dup 0 ne { % comparing the size to 0 (as boxSize is on top)
        1 sub % subtract 1 from boxSize
        boxSides {dup} repeat - Fbox X - Y
    } if
    pop 
} def

/Fbox {
    10 0 rlineto
} def

/+ { % turn right 90
    boxAng rotate
} def

/- { % turn left 90
    boxAng neg rotate
} def

1 inch 2.5 inch translate
% 0 setlinewidth
newpath
0 0 moveto
1000 X 
stroke

showpage

